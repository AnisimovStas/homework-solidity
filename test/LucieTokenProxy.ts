import hre, { ethers, upgrades } from "hardhat";
import { loadFixture } from "@nomicfoundation/hardhat-toolbox/network-helpers";
import { expect } from "chai";
import { getAccountBalance, setAccountBalance } from "./utils";


describe.only("LucieToken", () => {

    async function deployLucieTokenContractV1() {
        const [owner, user] = await ethers.getSigners();
        const LucieTokenV1 = await ethers.getContractFactory("LucieTokenV1");
        const tokenV1 = await upgrades.deployProxy(LucieTokenV1, [], {
            initializer: "initialize",
            kind: "uups",
        });
        await tokenV1.waitForDeployment();

        return { owner, user, tokenV1 }
    }

    async function deployLucieTokenContractV2() {
        const { tokenV1, owner, user } = await deployLucieTokenContractV1();

        const LucieTokenV2 = await ethers.getContractFactory("LucieTokenV2");
        const tokenV2 = await upgrades.upgradeProxy(await tokenV1.getAddress(), LucieTokenV2);

        await tokenV2.connect(owner).initializeV2();

        return { owner, user, tokenV2, tokenV1 }
    }


    it("shoould deploy V1 contract", async () => {
        const { tokenV1 } = await deployLucieTokenContractV1();
        expect(await tokenV1.name()).to.equal("LucieToken");
        expect(await tokenV1.symbol()).to.equal("LT");
        expect(await tokenV1.getMintPrice()).to.equal(ethers.parseUnits("0.0001", "ether"));
    })

    it("should upgrade to V2 and initializeV2 correctly", async () => {
        const { tokenV2, owner } = await deployLucieTokenContractV2()

        await tokenV2.safeMintWithAutoIncrement({ value: ethers.parseUnits("0.0001", "ether") });
        expect(await tokenV2.ownerOf(1)).to.equal(owner.address);
    });
    it("should revert mint with autogenerated ID if URI not defined", async () => {
        const { tokenV2 } = await deployLucieTokenContractV2()
        await tokenV2.safeMintWithAutoIncrement({ value: ethers.parseUnits("0.0001", "ether") });
        await tokenV2.safeMintWithAutoIncrement({ value: ethers.parseUnits("0.0001", "ether") });
        await tokenV2.safeMintWithAutoIncrement({ value: ethers.parseUnits("0.0001", "ether") });
        await expect(tokenV2.safeMintWithAutoIncrement({ value: ethers.parseUnits("0.0001", "ether") }))
            .to.be.revertedWithCustomError(tokenV2, "URINotDefined()");
    });

    it("should revert mint with autogenerated ID if URI not defined", async () => {
        const { tokenV2 } = await deployLucieTokenContractV2()
        await expect(tokenV2.initializeV2()).to.be.revertedWithCustomError(tokenV2, "InvalidInitialization()");
    });

});